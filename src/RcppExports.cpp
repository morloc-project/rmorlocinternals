// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mlc_serialize
Rcpp::String mlc_serialize(SEXP x, std::string schema);
RcppExport SEXP _rmorlocinternals_mlc_serialize(SEXP xSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(mlc_serialize(x, schema));
    return rcpp_result_gen;
END_RCPP
}
// mlc_deserialize
SEXP mlc_deserialize(std::string data, std::string schema);
RcppExport SEXP _rmorlocinternals_mlc_deserialize(SEXP dataSEXP, SEXP schemaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type schema(schemaSEXP);
    rcpp_result_gen = Rcpp::wrap(mlc_deserialize(data, schema));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rmorlocinternals_mlc_serialize", (DL_FUNC) &_rmorlocinternals_mlc_serialize, 2},
    {"_rmorlocinternals_mlc_deserialize", (DL_FUNC) &_rmorlocinternals_mlc_deserialize, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmorlocinternals(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
